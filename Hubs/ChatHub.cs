using Microsoft.AspNetCore.SignalR;
using NhaNghiYenNhi.Services;

namespace NhaNghiYenNhi.Hubs
{
    public class ChatHub : Hub
    {
        private readonly IChatbotAgentService _chatbotAgentService;

        public ChatHub(IChatbotAgentService chatbotAgentService)
        {
            _chatbotAgentService = chatbotAgentService;
        }

        /// <summary>
        /// X·ª≠ l√Ω tin nh·∫Øn t·ª´ client v√† tr·∫£ v·ªÅ response real-time
        /// </summary>
        public async Task SendMessage(string message)
        {
            var connectionId = Context.ConnectionId;

            try
            {
                // Th√¥ng b√°o cho client r·∫±ng AI ƒëang x·ª≠ l√Ω
                await Clients.Caller.SendAsync("TypingIndicator", true);

                // X·ª≠ l√Ω tin nh·∫Øn b·∫±ng AI Agent
                var response = await _chatbotAgentService.ProcessUserMessageAsync(message);

                // T·∫Øt typing indicator
                await Clients.Caller.SendAsync("TypingIndicator", false);

                // G·ª≠i ph·∫£n h·ªìi v·ªÅ client
                await Clients.Caller.SendAsync("ReceiveMessage", new
                {
                    success = true,
                    response = response,
                    type = "success",
                    timestamp = DateTime.Now
                });

                // Log cho debug
                Console.WriteLine($"üîÑ [SignalR] User: {message} | AI: {response}");
            }
            catch (Exception ex)
            {
                // T·∫Øt typing indicator n·∫øu c√≥ l·ªói
                await Clients.Caller.SendAsync("TypingIndicator", false);

                // G·ª≠i th√¥ng b√°o l·ªói
                await Clients.Caller.SendAsync("ReceiveMessage", new
                {
                    success = false,
                    response = $"‚ùå Xin l·ªói, c√≥ l·ªói x·∫£y ra: {ex.Message}",
                    type = "error",
                    timestamp = DateTime.Now
                });

                Console.WriteLine($"‚ùå [SignalR Error] {ex.Message}");
            }
        }

        /// <summary>
        /// Th√¥ng b√°o khi client k·∫øt n·ªëi
        /// </summary>
        public override async Task OnConnectedAsync()
        {
            Console.WriteLine($"üîó [SignalR] Client connected: {Context.ConnectionId}");
            
            // Ch√†o m·ª´ng client m·ªõi
            await Clients.Caller.SendAsync("ReceiveMessage", new
            {
                success = true,
                response = "üéâ K·∫øt n·ªëi real-time th√†nh c√¥ng! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ tr√≤ chuy·ªán v·ªõi AI Agent trong th·ªùi gian th·ª±c.",
                type = "success",
                timestamp = DateTime.Now
            });

            await base.OnConnectedAsync();
        }

        /// <summary>
        /// Th√¥ng b√°o khi client ng·∫Øt k·∫øt n·ªëi
        /// </summary>
        public override async Task OnDisconnectedAsync(Exception? exception)
        {
            Console.WriteLine($"üîå [SignalR] Client disconnected: {Context.ConnectionId}");
            await base.OnDisconnectedAsync(exception);
        }

        /// <summary>
        /// Join room theo ph√≤ng (n·∫øu c·∫ßn ph√¢n chia theo ph√≤ng)
        /// </summary>
        public async Task JoinRoom(string roomName)
        {
            await Groups.AddToGroupAsync(Context.ConnectionId, roomName);
            Console.WriteLine($"üè† [SignalR] {Context.ConnectionId} joined room: {roomName}");
        }

        /// <summary>
        /// Leave room
        /// </summary>
        public async Task LeaveRoom(string roomName)
        {
            await Groups.RemoveFromGroupAsync(Context.ConnectionId, roomName);
            Console.WriteLine($"üö™ [SignalR] {Context.ConnectionId} left room: {roomName}");
        }

        /// <summary>
        /// Broadcast tin nh·∫Øn cho t·∫•t c·∫£ clients (n·∫øu c·∫ßn)
        /// </summary>
        public async Task BroadcastMessage(string message)
        {
            await Clients.All.SendAsync("ReceiveMessage", new
            {
                success = true,
                response = $"üì¢ Th√¥ng b√°o: {message}",
                type = "broadcast",
                timestamp = DateTime.Now
            });
        }
    }
} 