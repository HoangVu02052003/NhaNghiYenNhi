using Microsoft.EntityFrameworkCore;
using NhaNghiYenNhi.Models;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Newtonsoft.Json;
using System.Text.RegularExpressions;

namespace NhaNghiYenNhi.Services
{
    public class ChatbotAgentService : IChatbotAgentService
    {
        private readonly MyDbContext _context;
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly IActionService _actionService;
        private readonly string _groqApiKey;
        private readonly string _groqApiUrl = "https://api.groq.com/openai/v1/chat/completions";

        public ChatbotAgentService(MyDbContext context, IHttpClientFactory httpClientFactory, IActionService actionService, IConfiguration configuration)
        {
            _context = context;
            _httpClientFactory = httpClientFactory;
            _actionService = actionService;
            _groqApiKey = configuration["GroqApiKey"] ?? "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";
        }

        public async Task<string> ProcessUserMessageAsync(string userMessage)
        {
            try
            {
                // Ph√¢n t√≠ch intent v√† th·ª±c hi·ªán action n·∫øu c·∫ßn
                var actionResult = await AnalyzeAndExecuteActionAsync(userMessage);
                
                if (actionResult != null)
                {
                    // N·∫øu c√≥ action ƒë∆∞·ª£c th·ª±c hi·ªán, tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi icon ph√π h·ª£p
                    var icon = actionResult.Success ? "‚úÖ" : "‚ùå";
                    var prefix = actionResult.Success ? "ƒê√£ th·ª±c hi·ªán:" : "L·ªói:";
                    return $"{icon} **{prefix}** {actionResult.Message}";
                }
                
                // N·∫øu kh√¥ng c√≥ action, tr·∫£ l·ªùi b√¨nh th∆∞·ªùng v·ªõi AI
                var contextData = await GatherContextDataAsync();
                var systemPrompt = CreateSystemPrompt(contextData);
                var response = await CallGroqApiAsync(systemPrompt, userMessage);
                
                return response;
            }
            catch (Exception ex)
            {
                return $"‚ùå **L·ªói h·ªá th·ªëng:** Em g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa C√¥ Ch·ªß: {ex.Message}";
            }
        }

        private async Task<ActionResult?> AnalyzeAndExecuteActionAsync(string userMessage)
        {
            var message = userMessage.ToLower().Trim();
            
            // Debug: Log message ƒë·ªÉ ki·ªÉm tra
            Console.WriteLine($"üîç Analyzing message: '{message}'");
            
            // S·ª≠ d·ª•ng LLM ƒë·ªÉ ph√¢n t√≠ch intent v√† tr√≠ch xu·∫•t th√¥ng tin
            var intentResult = await AnalyzeIntentWithLLM(userMessage);
            
            if (intentResult != null)
            {
                Console.WriteLine($"ü§ñ LLM Intent: {intentResult.Intent}, Room: {intentResult.RoomNumber}, Details: {intentResult.Details}");
                
                switch (intentResult.Intent.ToLower())
                {
                    case "book_room":
                        if (intentResult.RoomNumber.HasValue)
                        {
                            var customerName = !string.IsNullOrEmpty(intentResult.CustomerName) ? intentResult.CustomerName : "Kh√°ch v√£ng lai";
                            return await _actionService.BookRoomAsync(intentResult.RoomNumber.Value, customerName);
                        }
                        break;
                        
                    case "add_product":
                        if (intentResult.RoomNumber.HasValue && intentResult.Products?.Any() == true)
                        {
                            if (intentResult.Products.Count == 1)
                            {
                                var product = intentResult.Products.First();
                                return await _actionService.AddProductToRoomAsync(intentResult.RoomNumber.Value, product.Name, product.Quantity);
                            }
                            else
                            {
                                // Multiple products
                                return await ProcessMultipleProductsFromLLM(intentResult.RoomNumber.Value, intentResult.Products);
                            }
                        }
                        break;
                        
                    case "checkout_room":
                        if (intentResult.RoomNumber.HasValue)
                        {
                            return await _actionService.CheckoutRoomAsync(intentResult.RoomNumber.Value);
                        }
                        break;
                        
                    case "clean_room":
                        if (intentResult.RoomNumber.HasValue)
                        {
                            return await _actionService.CleanRoomAsync(intentResult.RoomNumber.Value);
                        }
                        break;
                        
                    case "check_status":
                        return await _actionService.GetRoomStatusAsync(intentResult.RoomNumber);
                        
                    case "find_product":
                        var searchTerm = !string.IsNullOrEmpty(intentResult.ProductName) ? intentResult.ProductName : "";
                        return await _actionService.FindProductAsync(searchTerm);
                }
            }

            Console.WriteLine($"‚ùå LLM failed to parse intent, falling back to regex patterns...");
            
            // Fallback: S·ª≠ d·ª•ng regex patterns n·∫øu LLM kh√¥ng ho·∫°t ƒë·ªông
            return await FallbackToRegexPatterns(message);
        }

        private async Task<IntentResult?> AnalyzeIntentWithLLM(string userMessage)
        {
            try
            {
                // L·∫•y context v·ªÅ s·∫£n ph·∫©m c√≥ s·∫µn
                var products = await _context.SanPhamNhaNghis.ToListAsync();
                var productList = string.Join(", ", products.Select(p => p.TenSanPham));
                
                var systemPrompt = $@"B·∫°n l√† AI ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa tin nh·∫Øn trong h·ªá th·ªëng qu·∫£n l√Ω nh√† ngh·ªâ.

DANH S√ÅCH S·∫¢N PH·∫®M C√ì S·∫¥N: {productList}

Ph√¢n t√≠ch tin nh·∫Øn v√† tr·∫£ v·ªÅ JSON v·ªõi format sau:
{{
    ""intent"": ""book_room|add_product|checkout_room|clean_room|check_status|find_product|unknown"",
    ""room_number"": s·ªë ph√≤ng (n·∫øu c√≥),
    ""customer_name"": t√™n kh√°ch (n·∫øu c√≥),
    ""product_name"": t√™n s·∫£n ph·∫©m ch√≠nh (n·∫øu c√≥),
    ""products"": [
        {{""name"": ""t√™n s·∫£n ph·∫©m"", ""quantity"": s·ªë l∆∞·ª£ng}},
        ...
    ],
    ""details"": ""th√¥ng tin b·ªï sung""
}}

QUY T·∫ÆC:
1. T√™n s·∫£n ph·∫©m ph·∫£i map ch√≠nh x√°c v·ªõi danh s√°ch c√≥ s·∫µn
2. N·∫øu user n√≥i ""b√≤ h√∫c"", ""sting"", ""m√¨ g√≥i"" th√¨ map v·ªõi t√™n ch√≠nh x√°c t·ª´ danh s√°ch
3. S·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1 n·∫øu kh√¥ng n√≥i r√µ
4. QUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, KH√îNG c√≥ markdown code blocks (```json), KH√îNG c√≥ text kh√°c
5. N·∫øu c√≥ nhi·ªÅu s·∫£n ph·∫©m (""v√†"", "","") th√¨ t√°ch ra th√†nh array

EXAMPLES:
- ""ph√≤ng 1 mua 2 b√≤ h√∫c"" ‚Üí {{""intent"": ""add_product"", ""room_number"": 1, ""products"": [{{""name"": ""B√≤ H√∫c"", ""quantity"": 2}}]}}
- ""s·ªë 2 tr·∫£ ph√≤ng"" ‚Üí {{""intent"": ""checkout_room"", ""room_number"": 2}}
- ""ƒë·∫∑t ph√≤ng s·ªë 3 cho Nguy·ªÖn VƒÉn A"" ‚Üí {{""intent"": ""book_room"", ""room_number"": 3, ""customer_name"": ""Nguy·ªÖn VƒÉn A""}}";

                var response = await CallGroqApiAsync(systemPrompt, userMessage);
                
                // Parse JSON response - handle markdown code blocks
                try
                {
                    // Clean response: remove markdown code blocks if present
                    var cleanResponse = response.Trim();
                    if (cleanResponse.StartsWith("```json"))
                    {
                        cleanResponse = cleanResponse.Substring(7); // Remove "```json"
                    }
                    if (cleanResponse.StartsWith("```"))
                    {
                        cleanResponse = cleanResponse.Substring(3); // Remove "```"
                    }
                    if (cleanResponse.EndsWith("```"))
                    {
                        cleanResponse = cleanResponse.Substring(0, cleanResponse.Length - 3); // Remove ending "```"
                    }
                    cleanResponse = cleanResponse.Trim();
                    
                    Console.WriteLine($"üßπ Cleaned JSON: {cleanResponse}");
                    
                    var intentResult = System.Text.Json.JsonSerializer.Deserialize<IntentResult>(cleanResponse, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    
                    return intentResult;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Failed to parse LLM response: {ex.Message}");
                    Console.WriteLine($"üîç LLM Response: {response}");
                    return null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå LLM Intent Analysis Error: {ex.Message}");
                return null;
            }
        }

        private async Task<ActionResult?> FallbackToRegexPatterns(string message)
        {
            Console.WriteLine($"üîÑ Using regex fallback for: '{message}'");
            
            // Pattern cho ƒë·∫∑t ph√≤ng - c·∫£i thi·ªán v·ªõi nhi·ªÅu patterns
            var bookPatterns = new[]
            {
                @"(?:ƒë·∫∑t|book|thu√™)\s*ph√≤ng\s*(?:s·ªë\s*)?(\d+)(?:\s+(?:cho\s+)?(.+))?",
                @"(?:s·ªë\s*)?(\d+)\s*(?:ƒë·∫∑t|book|thu√™)\s*(?:ph√≤ng)?(?:\s+(?:cho\s+)?(.+))?",
                @"(?:c√≥\s*kh√°ch|kh√°ch)\s*(?:ƒë·∫∑t|thu√™)\s*ph√≤ng\s*(?:s·ªë\s*)?(\d+)(?:\s+(.+))?",
                @"ph√≤ng\s*(?:s·ªë\s*)?(\d+)\s*(?:ƒë·∫∑t|thu√™|book)(?:\s+(.+))?",
                @"chuy·ªÉn\s*(?:s·ªë\s*)?(\d+)\s*(?:th√†nh|sang)\s*(?:tr·∫°ng\s*th√°i\s*)?(?:ƒë√£\s*)?(?:thu√™|ƒë·∫∑t)",
                @"(\d+)\s*(?:thu√™|ƒë·∫∑t)\s*(?:ph√≤ng)?\s*(.+)?"
            };

            foreach (var pattern in bookPatterns)
            {
                var bookMatch = Regex.Match(message, pattern, RegexOptions.IgnoreCase);
                Console.WriteLine($"üîç Testing book room pattern: {pattern} against '{message}'");
                if (bookMatch.Success)
                {
                    Console.WriteLine($"‚úÖ Book room pattern matched: {pattern}");
                    var roomNumber = int.Parse(bookMatch.Groups[1].Value);
                    var customerName = bookMatch.Groups[2].Success ? bookMatch.Groups[2].Value.Trim() : "Kh√°ch v√£ng lai";
                    return await _actionService.BookRoomAsync(roomNumber, customerName);
                }
            }

            // Pattern cho th√™m s·∫£n ph·∫©m - c·∫£i thi·ªán ƒë·ªÉ d·ªÖ match h∆°n
            var addProductPatterns = new[]
            {
                @"ph√≤ng\s*(?:s·ªë\s*)?(\d+)\s+(?:mua|order|ƒë·∫∑t|g·ªçi)\s+(.+?)(?:\s+(\d+)\s*(?:c√°i|chai|lon|g√≥i|su·∫•t|ly)?)?$",
                @"(?:mua|order|ƒë·∫∑t|g·ªçi)\s+(.+?)\s+(?:cho\s+)?ph√≤ng\s*(?:s·ªë\s*)?(\d+)(?:\s+(\d+)\s*(?:c√°i|chai|lon|g√≥i|su·∫•t|ly)?)?",
                @"ph√≤ng\s*(\d+)\s*:\s*(.+?)(?:\s+(\d+)\s*(?:c√°i|chai|lon|g√≥i|su·∫•t|ly)?)?$",
                @"(?:s·ªë\s*)?(\d+)\s+(?:mua|order|ƒë·∫∑t|g·ªçi)\s+(.+?)(?:\s+(\d+)\s*(?:c√°i|chai|lon|g√≥i|su·∫•t|ly)?)?$",
                @"(?:s·ªë\s*)?(\d+)\s+(?:mua|order|ƒë·∫∑t|g·ªçi|l·∫•y)\s+(.+)",
                @"(?:ph√≤ng\s*)?(?:s·ªë\s*)?(\d+)\s+(?:c·∫ßn|mu·ªën|l·∫•y|d√πng)\s+(.+)"
            };

            foreach (var pattern in addProductPatterns)
            {
                var productMatch = Regex.Match(message, pattern, RegexOptions.IgnoreCase);
                Console.WriteLine($"üîç Testing add product pattern: {pattern} against '{message}'");
                if (productMatch.Success)
                {
                    Console.WriteLine($"‚úÖ Add product pattern matched: {pattern}");
                    
                    int roomNumber;
                    string productName;
                    int quantity = 1;
                    
                    if (pattern.Contains("cho\\s+ph√≤ng")) // Pattern th·ª© 2: "mua X cho ph√≤ng Y"
                    {
                        productName = productMatch.Groups[1].Value.Trim();
                        roomNumber = int.Parse(productMatch.Groups[2].Value);
                        if (productMatch.Groups[3].Success) quantity = int.Parse(productMatch.Groups[3].Value);
                    }
                    else if (pattern.Contains("(?:s·ªë\\s*)?\\(\\d+\\)\\s+(?:mua")) // Pattern s·ªë X mua Y
                    {
                        roomNumber = int.Parse(productMatch.Groups[1].Value);
                        productName = productMatch.Groups[2].Value.Trim();
                        if (productMatch.Groups[3].Success) quantity = int.Parse(productMatch.Groups[3].Value);
                    }
                    else // Pattern th·ª© 1 v√† 3: "ph√≤ng X mua Y"
                    {
                        roomNumber = int.Parse(productMatch.Groups[1].Value);
                        productName = productMatch.Groups[2].Value.Trim();
                        if (productMatch.Groups[3].Success) quantity = int.Parse(productMatch.Groups[3].Value);
                    }

                    // Ki·ªÉm tra v√† x·ª≠ l√Ω s·∫£n ph·∫©m v·ªõi s·ªë l∆∞·ª£ng
                    var (extractedQuantity, cleanName) = ExtractQuantityFromProductName(productName);
                    if (extractedQuantity > 0)
                    {
                        quantity = extractedQuantity;
                        productName = cleanName;
                    }

                    // Clean product name
                    productName = CleanProductName(productName);
                    Console.WriteLine($"üßπ Clean product name: '{productMatch.Groups[2].Value.Trim()}' ‚Üí '{productName}'");

                    // Ki·ªÉm tra multiple products
                    if (ContainsMultipleProducts(productName))
                    {
                        return await ProcessMultipleProducts(roomNumber, productName);
                    }
                    else
                    {
                        return await _actionService.AddProductToRoomAsync(roomNumber, productName, quantity);
                    }
                }
            }

            // Pattern cho tr·∫£ ph√≤ng - c·∫£i thi·ªán v·ªõi nhi·ªÅu pattern h∆°n
            var checkoutPatterns = new[]
            {
                @"(?:tr·∫£|checkout|check\s*out|thanh\s*to√°n)\s*ph√≤ng\s*(?:s·ªë\s*)?(\d+)",
                @"ph√≤ng\s*(?:s·ªë\s*)?(\d+)\s*(?:tr·∫£|checkout|check\s*out|thanh\s*to√°n)",
                @"(?:s·ªë\s*)?(\d+)\s*(?:tr·∫£|checkout)\s*(?:ph√≤ng)?",
                @"(?:tr·∫£|checkout)\s*(?:s·ªë\s*)?(\d+)",
                @"(\d+)\s*(?:tr·∫£|checkout|check\s*out)\s*(?:ph√≤ng)?",
                @"(?:s·ªë\s*)?(\d+)\s*(?:tr·∫£|checkout|thanh\s*to√°n)\s*(?:ph√≤ng)?"
            };

            foreach (var pattern in checkoutPatterns)
            {
                var checkoutMatch = Regex.Match(message, pattern, RegexOptions.IgnoreCase);
                Console.WriteLine($"üîç Testing checkout pattern: {pattern} against '{message}'");
                if (checkoutMatch.Success)
                {
                    Console.WriteLine($"‚úÖ Checkout pattern matched: {pattern}");
                    var roomNumber = int.Parse(checkoutMatch.Groups[1].Value);
                    return await _actionService.CheckoutRoomAsync(roomNumber);
                }
            }

            // Pattern cho d·ªçn ph√≤ng
            var cleanPatterns = new[]
            {
                @"(?:d·ªçn|clean|l√†m\s*s·∫°ch)\s*ph√≤ng\s*(?:s·ªë\s*)?(\d+)",
                @"ph√≤ng\s*(?:s·ªë\s*)?(\d+)\s*(?:d·ªçn|clean|l√†m\s*s·∫°ch)",
                @"(?:s·ªë\s*)?(\d+)\s*(?:d·ªçn|clean)\s*(?:ph√≤ng)?"
            };

            foreach (var pattern in cleanPatterns)
            {
                var cleanMatch = Regex.Match(message, pattern, RegexOptions.IgnoreCase);
                if (cleanMatch.Success)
                {
                    Console.WriteLine($"‚úÖ Clean room pattern matched: {pattern}");
                    var roomNumber = int.Parse(cleanMatch.Groups[1].Value);
                    return await _actionService.CleanRoomAsync(roomNumber);
                }
            }

            // Pattern cho ki·ªÉm tra tr·∫°ng th√°i
            var statusPatterns = new[]
            {
                @"(?:tr·∫°ng\s*th√°i|status|t√¨nh\s*tr·∫°ng)\s*(?:ph√≤ng\s*)?(?:s·ªë\s*)?(\d+)?",
                @"(?:ph√≤ng\s*)?(?:s·ªë\s*)?(\d+)\s*(?:nh∆∞\s*th·∫ø\s*n√†o|th·∫ø\s*n√†o|ra\s*sao)",
                @"(?:ki·ªÉm\s*tra|check)\s*(?:ph√≤ng\s*)?(?:s·ªë\s*)?(\d+)?"
            };

            foreach (var pattern in statusPatterns)
            {
                var statusMatch = Regex.Match(message, pattern, RegexOptions.IgnoreCase);
                if (statusMatch.Success)
                {
                    Console.WriteLine($"‚úÖ Status check pattern matched: {pattern}");
                    var roomNumber = statusMatch.Groups[1].Success ? int.Parse(statusMatch.Groups[1].Value) : (int?)null;
                    return await _actionService.GetRoomStatusAsync(roomNumber);
                }
            }

            // Pattern cho t√¨m s·∫£n ph·∫©m
            if (ContainsProductSearchKeywords(message))
            {
                Console.WriteLine("‚úÖ Product search triggered!");
                var searchTerm = ExtractProductSearchTerm(message);
                return await _actionService.FindProductAsync(searchTerm);
            }

            Console.WriteLine($"‚ùå No pattern matched for: '{message}'");
            return null;
        }

        private async Task<ActionResult> ProcessMultipleProductsFromLLM(int roomNumber, List<ProductInfo> products)
        {
            var results = new List<string>();
            var totalSuccess = 0;
            var totalFailed = 0;
            
            foreach (var product in products)
            {
                var result = await _actionService.AddProductToRoomAsync(roomNumber, product.Name, product.Quantity);
                
                if (result.Success)
                {
                    totalSuccess++;
                    results.Add($"‚úÖ {product.Quantity} x {product.Name}");
                }
                else
                {
                    totalFailed++;
                    results.Add($"‚ùå {product.Quantity} x {product.Name} - {result.Message}");
                }
            }
            
            var summary = $"üì¶ X·ª≠ l√Ω {products.Count} s·∫£n ph·∫©m cho ph√≤ng {roomNumber}:\n" +
                         string.Join("\n", results) +
                         $"\n\nüìä K·∫øt qu·∫£: {totalSuccess} th√†nh c√¥ng, {totalFailed} th·∫•t b·∫°i";
            
            return new ActionResult 
            { 
                Success = totalSuccess > 0, 
                Message = summary 
            };
        }

        // Classes for LLM response parsing
        private class IntentResult
        {
            public string Intent { get; set; } = "";
            [JsonPropertyName("room_number")]
            public int? RoomNumber { get; set; }
            [JsonPropertyName("customer_name")]
            public string? CustomerName { get; set; }
            [JsonPropertyName("product_name")]
            public string? ProductName { get; set; }
            public List<ProductInfo> Products { get; set; } = new();
            public string? Details { get; set; }
        }

        private class ProductInfo
        {
            public string Name { get; set; } = "";
            public int Quantity { get; set; } = 1;
        }

        private (int Quantity, string CleanName) ExtractQuantityFromProductName(string productName)
        {
            // Tr√≠ch xu·∫•t s·ªë l∆∞·ª£ng t·ª´ ƒë·∫ßu chu·ªói: "2 m√¨ g√≥i" ‚Üí quantity=2, name="m√¨ g√≥i"
            var quantityPattern = @"^\s*(\d+)\s+(.+)$";
            var match = Regex.Match(productName, quantityPattern, RegexOptions.IgnoreCase);
            
            if (match.Success)
            {
                var quantity = int.Parse(match.Groups[1].Value);
                var cleanName = match.Groups[2].Value.Trim();
                Console.WriteLine($"üìä Extract quantity: '{productName}' ‚Üí Quantity: {quantity}, Name: '{cleanName}'");
                return (quantity, cleanName);
            }
            
            return (0, productName);
        }

        private bool ContainsMultipleProducts(string productName)
        {
            return productName.Contains(" v√† ") || productName.Contains(",") || 
                   Regex.IsMatch(productName, @"\d+\s+\w+.*\d+\s+\w+", RegexOptions.IgnoreCase);
        }

        private async Task<ActionResult> ProcessMultipleProducts(int roomNumber, string productText)
        {
            Console.WriteLine($"üîç Processing multiple products: '{productText}' for room {roomNumber}");
            
            var products = ParseMultipleProducts(productText);
            var results = new List<string>();
            var totalSuccess = 0;
            var totalFailed = 0;
            
            foreach (var (quantity, name) in products)
            {
                var cleanName = CleanProductName(name);
                var result = await _actionService.AddProductToRoomAsync(roomNumber, cleanName, quantity);
                
                if (result.Success)
                {
                    totalSuccess++;
                    results.Add($"‚úÖ {quantity} x {cleanName}");
                }
                else
                {
                    totalFailed++;
                    results.Add($"‚ùå {quantity} x {cleanName} - {result.Message}");
                }
            }
            
            var summary = $"üì¶ X·ª≠ l√Ω {products.Count} s·∫£n ph·∫©m cho ph√≤ng {roomNumber}:\n" +
                         string.Join("\n", results) +
                         $"\n\nüìä K·∫øt qu·∫£: {totalSuccess} th√†nh c√¥ng, {totalFailed} th·∫•t b·∫°i";
            
            return new ActionResult 
            { 
                Success = totalSuccess > 0, 
                Message = summary 
            };
        }

        private List<(int quantity, string name)> ParseMultipleProducts(string productText)
        {
            var products = new List<(int quantity, string name)>();
            
            // Pattern ƒë·ªÉ match: "2 b√≤ h√∫c v√† 1 m√¨ g√≥i" ho·∫∑c "2 b√≤ h√∫c, 1 m√¨ g√≥i"
            var pattern = @"(\d+)\s+([^v√†,]+)(?:\s*(?:v√†|,)\s*)?";
            var matches = Regex.Matches(productText, pattern, RegexOptions.IgnoreCase);
            
            foreach (Match match in matches)
            {
                if (match.Success)
                {
                    var quantity = int.Parse(match.Groups[1].Value);
                    var name = match.Groups[2].Value.Trim();
                    products.Add((quantity, name));
                    Console.WriteLine($"üì¶ Parsed product: {quantity} x {name}");
                }
            }
            
            // N·∫øu kh√¥ng parse ƒë∆∞·ª£c, th·ª≠ fallback
            if (products.Count == 0)
            {
                products.Add((1, productText));
            }
            
            return products;
        }

        private bool ContainsProductSearchKeywords(string message)
        {
            var keywords = new[] { "c√≥ g√¨", "s·∫£n ph·∫©m", "menu", "danh s√°ch", "b√°n g√¨", "t√¨m", "search" };
            return keywords.Any(keyword => message.Contains(keyword, StringComparison.OrdinalIgnoreCase));
        }

        private string ExtractProductSearchTerm(string message)
        {
            // Tr√≠ch xu·∫•t t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ c√¢u
            var terms = message.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var relevantTerms = terms.Where(t => !IsStopWord(t)).ToList();
            
            if (relevantTerms.Count > 2)
            {
                return string.Join(" ", relevantTerms.Skip(1).Take(2));
            }
            
            return relevantTerms.LastOrDefault() ?? "";
        }

        private bool IsStopWord(string word)
        {
            var stopWords = new[] { "c√≥", "g√¨", "l√†", "c·ªßa", "trong", "t√¨m", "ki·∫øm", "search", "danh", "s√°ch", "menu", "ph√≤ng", "s·ªë" };
            return stopWords.Contains(word.ToLower());
        }

        private string CleanProductName(string productName)
        {
            // Lo·∫°i b·ªè s·ªë l∆∞·ª£ng v√† gi√° ti·ªÅn n·∫øu c√≥
            // Pattern: "1 - b√≤ h√∫c: 15,000" ‚Üí "b√≤ h√∫c"
            var cleaned = productName;
            
            // Lo·∫°i b·ªè pattern "s·ªë - t√™n: gi√°" 
            var pricePattern = @"^\s*\d+\s*-\s*(.+?)\s*:\s*[\d,]+\s*$";
            var priceMatch = Regex.Match(cleaned, pricePattern, RegexOptions.IgnoreCase);
            if (priceMatch.Success)
            {
                cleaned = priceMatch.Groups[1].Value.Trim();
            }
            
            // Lo·∫°i b·ªè pattern "s·ªë - t√™n"
            var numberPattern = @"^\s*\d+\s*-\s*(.+)$";
            var numberMatch = Regex.Match(cleaned, numberPattern, RegexOptions.IgnoreCase);
            if (numberMatch.Success)
            {
                cleaned = numberMatch.Groups[1].Value.Trim();
            }
            
            // Lo·∫°i b·ªè gi√° ti·ªÅn ·ªü cu·ªëi: "b√≤ h√∫c: 15,000" ‚Üí "b√≤ h√∫c"
            var endPricePattern = @"^(.+?)\s*:\s*[\d,]+\s*$";
            var endPriceMatch = Regex.Match(cleaned, endPricePattern, RegexOptions.IgnoreCase);
            if (endPriceMatch.Success)
            {
                cleaned = endPriceMatch.Groups[1].Value.Trim();
            }
            
            // Lo·∫°i b·ªè s·ªë l∆∞·ª£ng ·ªü ƒë·∫ßu: "2 sting" ‚Üí "sting" 
            var quantityPattern = @"^\s*\d+\s+(.+)$";
            var quantityMatch = Regex.Match(cleaned, quantityPattern, RegexOptions.IgnoreCase);
            if (quantityMatch.Success)
            {
                cleaned = quantityMatch.Groups[1].Value.Trim();
            }

            // Lo·∫°i b·ªè c√°c t·ª´ kh√≥a kh√¥ng c·∫ßn thi·∫øt
            cleaned = cleaned
                .Replace("s·∫£n ph·∫©m", "")
                .Replace("c√≥", "")
                .Replace("g√¨", "")
                .Replace("m√≥n", "")
                .Replace("ƒë·ªì", "")
                .Replace("th·ª©c", "")
                .Replace("u·ªëng", "")
                .Replace("ƒÉn", "")
                .Trim();

            Console.WriteLine($"üßπ Clean product name: '{productName}' ‚Üí '{cleaned}'");
            return cleaned;
        }

        private async Task<ContextData> GatherContextDataAsync()
        {
            var currentTime = DateTime.Now;
            
            var phongs = await _context.Phongs
                .Include(p => p.IdLoaiPhongMacDinhNavigation)
                .ToListAsync();

            var loaiPhongs = await _context.LoaiPhongs.ToListAsync();
            var sanPhams = await _context.SanPhamNhaNghis.ToListAsync();

            var thuePhongs = await _context.ThuePhongs
                .Include(tp => tp.IdKhachHangNavigation)
                .Include(tp => tp.IdLoaiPhongNavigation)
                .Where(tp => !tp.TraPhongs.Any())
                .ToListAsync();

            var phongDangThueDetails = new List<PhongDangThueInfo>();
            foreach (var thue in thuePhongs)
            {
                var phong = phongs.FirstOrDefault(p => p.Id == thue.IdPhong);
                if (phong != null && thue.ThoiGianVao.HasValue)
                {
                    var thoiGianThue = currentTime - thue.ThoiGianVao.Value;
                    
                    var sanPhamInfo = "";
                    if (!string.IsNullOrEmpty(thue.SanPhamDaMua) && thue.SanPhamDaMua != "0")
                    {
                        try
                        {
                            var sanPhamDict = JsonConvert.DeserializeObject<Dictionary<int, int>>(thue.SanPhamDaMua);
                            if (sanPhamDict != null && sanPhamDict.Any())
                            {
                                var sanPhamIds = sanPhamDict.Keys.ToList();
                                var sanPhamsInfo = await _context.SanPhamNhaNghis
                                    .Where(sp => sanPhamIds.Contains(sp.Id))
                                    .ToListAsync();
                                    
                                var sanPhamList = sanPhamsInfo.Select(sp => 
                                    $"{sp.TenSanPham} (SL: {sanPhamDict.GetValueOrDefault(sp.Id, 0)})").ToList();
                                sanPhamInfo = string.Join(", ", sanPhamList);
                            }
                        }
                        catch
                        {
                            if (thue.SanPhamDaMua != "0")
                            {
                                var oldIds = thue.SanPhamDaMua.Split('-').Where(s => int.TryParse(s, out _)).Select(int.Parse);
                                var sanPhamsOld = await _context.SanPhamNhaNghis
                                    .Where(sp => oldIds.Contains(sp.Id))
                                    .ToListAsync();
                                sanPhamInfo = string.Join(", ", sanPhamsOld.Select(sp => sp.TenSanPham));
                            }
                        }
                    }

                    phongDangThueDetails.Add(new PhongDangThueInfo
                    {
                        TenPhong = phong.TenPhong,
                        ThoiGianVao = thue.ThoiGianVao.Value,
                        ThoiGianThue = thoiGianThue,
                        KhachHang = thue.IdKhachHangNavigation?.HoTen ?? "Kh√°ch v√£ng lai",
                        LoaiPhong = thue.IdLoaiPhongNavigation?.TenLoai ?? "Kh√¥ng x√°c ƒë·ªãnh",
                        SanPhamDaMua = sanPhamInfo
                    });
                }
            }

            var thuePhongHomNay = await _context.ThuePhongs
                .Where(tp => tp.ThoiGianVao.HasValue && tp.ThoiGianVao.Value.Date == currentTime.Date)
                .CountAsync();

            var traPhongHomNay = await _context.TraPhongs
                .Where(tp => tp.ThoiGianTra.HasValue && tp.ThoiGianTra.Value.Date == currentTime.Date)
                .CountAsync();

            return new ContextData
            {
                TongSoPhong = phongs.Count,
                PhongTrong = phongs.Count(p => p.TrangThai == 0),
                PhongDangThue = phongs.Count(p => p.TrangThai == 1),
                PhongDangDonDep = phongs.Count(p => p.TrangThai == 3),
                PhongDangThueDetails = phongDangThueDetails,
                ThuePhongHomNay = thuePhongHomNay,
                TraPhongHomNay = traPhongHomNay,
                NgayHienTai = currentTime.ToString("dd/MM/yyyy"),
                GioHienTai = currentTime.ToString("HH:mm"),
                LoaiPhongs = loaiPhongs,
                SanPhams = sanPhams
            };
        }

        private string CreateSystemPrompt(ContextData context)
        {
            var sb = new StringBuilder();
            sb.AppendLine("B·∫°n l√† tr·ª£ l√Ω AI AGENT th√¥ng minh cho QU·∫¢N L√ù nh√† ngh·ªâ Y·∫øn Nhi. C√¥ Ch·ªß ƒëang n√≥i chuy·ªán v·ªõi em.");
            sb.AppendLine();
            sb.AppendLine("ü§ñ KH·∫¢ NƒÇNG ƒê·∫∂C BI·ªÜT:");
            sb.AppendLine("Em c√≥ th·ªÉ T·ª∞ ƒê·ªòNG th·ª±c hi·ªán c√°c t√°c v·ª• khi C√¥ Ch·ªß y√™u c·∫ßu:");
            sb.AppendLine("- 'ƒê·∫∑t ph√≤ng s·ªë 1 cho Nguy·ªÖn VƒÉn A' ‚Üí Em s·∫Ω t·ª± ƒë·ªông ƒë·∫∑t ph√≤ng");
            sb.AppendLine("- 'Ph√≤ng 2 mua n∆∞·ªõc ng·ªçt' ‚Üí Em s·∫Ω t·ª± ƒë·ªông th√™m s·∫£n ph·∫©m");
            sb.AppendLine("- 'Tr·∫£ ph√≤ng s·ªë 3' ‚Üí Em s·∫Ω t·ª± ƒë·ªông checkout v√† t√≠nh ti·ªÅn");
            sb.AppendLine("- 'D·ªçn ph√≤ng s·ªë 4' ‚Üí Em s·∫Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng");
            sb.AppendLine("- 'Ki·ªÉm tra ph√≤ng 5' ‚Üí Em s·∫Ω b√°o c√°o chi ti·∫øt");
            sb.AppendLine();
            sb.AppendLine("TH√îNG TIN HI·ªÜN T·∫†I:");
            sb.AppendLine($"- Ng√†y gi·ªù: {context.NgayHienTai} {context.GioHienTai}");
            sb.AppendLine($"- T·ªïng s·ªë ph√≤ng: {context.TongSoPhong}");
            sb.AppendLine($"- Ph√≤ng tr·ªëng: {context.PhongTrong}");
            sb.AppendLine($"- Ph√≤ng ƒëang thu√™: {context.PhongDangThue}");
            sb.AppendLine($"- Ph√≤ng ƒëang d·ªçn d·∫πp: {context.PhongDangDonDep}");
            sb.AppendLine($"- Thu√™ ph√≤ng h√¥m nay: {context.ThuePhongHomNay}");
            sb.AppendLine($"- Tr·∫£ ph√≤ng h√¥m nay: {context.TraPhongHomNay}");
            sb.AppendLine();
            
            if (context.PhongDangThueDetails.Any())
            {
                sb.AppendLine("CHI TI·∫æT PH√íNG ƒêANG THU√ä:");
                foreach (var phong in context.PhongDangThueDetails)
                {
                    sb.AppendLine($"- {phong.TenPhong}: {phong.KhachHang}, {phong.ThoiGianThue.Hours}h{phong.ThoiGianThue.Minutes}m");
                    if (!string.IsNullOrEmpty(phong.SanPhamDaMua))
                    {
                        sb.AppendLine($"  + ƒê√£ mua: {phong.SanPhamDaMua}");
                    }
                }
            }

            sb.AppendLine();
            sb.AppendLine("LO·∫†I PH√íNG & GI√Å:");
            foreach (var loaiPhong in context.LoaiPhongs)
            {
                sb.AppendLine($"- {loaiPhong.TenLoai}: {loaiPhong.GioDau:N0}‚Ç´/h ƒë·∫ßu, {loaiPhong.GioSau:N0}‚Ç´/h sau, {loaiPhong.QuaDem:N0}‚Ç´/ƒë√™m");
            }

            sb.AppendLine();
            sb.AppendLine("S·∫¢N PH·∫®M C√ì S·∫¥N:");
            foreach (var sanPham in context.SanPhams)
            {
                var trangThai = sanPham.Con == true ? "‚úÖ" : "‚ùå";
                sb.AppendLine($"- {sanPham.TenSanPham}: {sanPham.Gia:N0}‚Ç´ {trangThai}");
            }
            
            sb.AppendLine();
            sb.AppendLine("PHONG C√ÅCH TR·∫¢ L·ªúI:");
            sb.AppendLine("- Tr·∫£ l·ªùi NG·∫ÆN G·ªåN, d√πng emoji ph√π h·ª£p");
            sb.AppendLine("- X∆∞ng 'Em', g·ªçi 'C√¥ Ch·ªß'");
            sb.AppendLine("- Khi th·ª±c hi·ªán action th√†nh c√¥ng: d√πng ‚úÖ");
            sb.AppendLine("- Khi c√≥ l·ªói: d√πng ‚ùå");
            sb.AppendLine("- Ch·ªâ cung c·∫•p th√¥ng tin c·∫ßn thi·∫øt");
            
            return sb.ToString();
        }

        private async Task<string> CallGroqApiAsync(string systemPrompt, string userMessage)
        {
            var httpClient = _httpClientFactory.CreateClient();
            
            var requestBody = new
            {
                model = "llama-3.3-70b-versatile",
                messages = new[]
                {
                    new { role = "system", content = systemPrompt },
                    new { role = "user", content = userMessage }
                },
                temperature = 0.7,
                max_tokens = 1024
            };

            var jsonContent = JsonConvert.SerializeObject(requestBody);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
            
            httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_groqApiKey}");

            var response = await httpClient.PostAsync(_groqApiUrl, content);
            var responseString = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception($"Groq API error: {response.StatusCode} - {responseString}");
            }

            dynamic result = JsonConvert.DeserializeObject(responseString);
            return result.choices[0].message.content;
        }

        private class ContextData
        {
            public int TongSoPhong { get; set; }
            public int PhongTrong { get; set; }
            public int PhongDangThue { get; set; }
            public int PhongDangDonDep { get; set; }
            public List<PhongDangThueInfo> PhongDangThueDetails { get; set; } = new();
            public int ThuePhongHomNay { get; set; }
            public int TraPhongHomNay { get; set; }
            public string NgayHienTai { get; set; } = "";
            public string GioHienTai { get; set; } = "";
            public List<LoaiPhong> LoaiPhongs { get; set; } = new();
            public List<SanPhamNhaNghi> SanPhams { get; set; } = new();
        }

        private class PhongDangThueInfo
        {
            public string TenPhong { get; set; } = "";
            public DateTime ThoiGianVao { get; set; }
            public TimeSpan ThoiGianThue { get; set; }
            public string KhachHang { get; set; } = "";
            public string LoaiPhong { get; set; } = "";
            public string SanPhamDaMua { get; set; } = "";
        }
    }
} 