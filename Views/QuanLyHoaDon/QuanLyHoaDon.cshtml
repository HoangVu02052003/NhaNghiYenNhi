@{
    ViewData["Title"] = "Quản Lý Hóa Đơn";
}

<!-- Tom Select CSS -->
<link href="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/css/tom-select.bootstrap5.min.css" rel="stylesheet">
<style>
    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
        background: rgba(255,255,255,0.9);
        backdrop-filter: blur(10px);
        margin-bottom: 30px;
    }

    .card-header {
        background: linear-gradient(135deg, #6B73FF 0%, #000DFF 100%);
        color: white;
        border-radius: 15px 15px 0 0 !important;
        padding: 20px;
    }

    .filters-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 30px;
    }

    .table {
        margin-bottom: 0;
    }

    .table th {
        border-top: none;
        background: rgba(107, 115, 255, 0.1);
        font-weight: 600;
    }

    .table td {
        vertical-align: middle;
    }

    .badge {
        padding: 8px 12px;
        border-radius: 8px;
    }

    .ts-control {
        border-radius: 10px;
        border: 1px solid #ced4da;
    }

    .ts-dropdown {
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .date-range-container {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .date-picker-wrapper {
        position: relative;
    }

    .date-picker-wrapper i {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    .form-control:focus {
        box-shadow: 0 0 0 0.2rem rgba(107, 115, 255, 0.25);
        border-color: #6B73FF;
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .total-row {
        background: rgba(107, 115, 255, 0.1);
        font-weight: bold;
    }

    .pagination {
        margin-top: 20px;
        justify-content: center;
    }

    .page-link {
        border-radius: 5px;
        margin: 0 5px;
        color: #6B73FF;
        border: 1px solid #6B73FF;
    }

    .page-link:hover {
        background: #6B73FF;
        color: white;
    }

    .page-item.active .page-link {
        background: #6B73FF;
        border-color: #6B73FF;
    }
</style>

<div class="container-fluid animate-fade-in">
    <div class="row">
        <div class="col-12">
            <div class="card filters-card">
                <div class="card-body">
                    <h5 class="card-title mb-4">
                        <i class="fas fa-filter"></i> Bộ lọc
                    </h5>
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>CCCD</label>
                                <select id="cccdFilter" class="form-control"></select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>Họ và tên</label>
                                <select id="hoTenFilter" class="form-control"></select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label>Thời gian thuê</label>
                            <div class="date-range-container">
                                <div class="date-picker-wrapper">
                                    <input type="text" class="form-control" id="fromDate" placeholder="Từ ngày">
                                    <i class="fas fa-calendar"></i>
                                </div>
                                <div class="date-picker-wrapper">
                                    <input type="text" class="form-control" id="toDate" placeholder="Đến ngày">
                                    <i class="fas fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="fas fa-file-invoice"></i> Danh sách hóa đơn
                    </h4>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Phòng</th>
                                    <th>Loại phòng</th>
                                    <th>Khách hàng</th>
                                    <th>CCCD</th>
                                    <th>Tuổi</th>
                                    <th>Giờ vào</th>
                                    <th>Giờ ra</th>
                                    <th>Thời gian</th>
                                    <th>Tiền phòng</th>
                                    <th>Tiền SP</th>
                                    <th>Tổng tiền</th>
                                    <th>Chi tiết</th>
                                </tr>
                            </thead>
                            <tbody id="hoaDonTableBody">
                                <!-- Dữ liệu sẽ được thêm vào đây bằng JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer">
                    <nav>
                        <ul class="pagination" id="pagination">
                            <!-- Phân trang sẽ được thêm vào đây bằng JavaScript -->
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Tom Select -->
    <script src="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/js/tom-select.complete.min.js"></script>
    
    <script>
        let hoaDonData = [];
        let tomSelectCCCD, tomSelectHoTen;
        const itemsPerPage = 10;
        let currentPage = 1;

        // Khởi tạo Tom Select
        function initializeTomSelect() {
            tomSelectCCCD = new TomSelect('#cccdFilter', {
                valueField: 'cccd',
                labelField: 'cccd',
                searchField: 'cccd',
                placeholder: 'Tìm theo CCCD',
                options: [],
                create: false
            });

            tomSelectHoTen = new TomSelect('#hoTenFilter', {
                valueField: 'hoTen',
                labelField: 'hoTen',
                searchField: 'hoTen',
                placeholder: 'Tìm theo họ tên',
                options: [],
                create: false
            });
        }

        // Khởi tạo Date Picker
        function initializeDatePickers() {
            $('#fromDate, #toDate').datepicker({
                format: 'dd/mm/yyyy',
                language: 'vi',
                autoclose: true,
                todayHighlight: true
            });
        }

        // Tính tuổi từ ngày sinh
        function calculateAge(birthDate) {
            if (!birthDate) return '';
            const today = new Date();
            const birth = new Date(birthDate);
            let age = today.getFullYear() - birth.getFullYear();
            const monthDiff = today.getMonth() - birth.getMonth();
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                age--;
            }
            return age;
        }

        // Format số tiền
        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN').format(amount);
        }

        // Format thời gian
        function formatDateTime(dateTime) {
            return moment(dateTime).format('HH:mm DD/MM/YYYY');
        }

        // Lọc và hiển thị dữ liệu
        function filterAndDisplayData() {
            const cccdFilter = tomSelectCCCD.getValue();
            const hoTenFilter = tomSelectHoTen.getValue();
            const fromDate = $('#fromDate').val();
            const toDate = $('#toDate').val();

            let filteredData = [...hoaDonData];

            if (cccdFilter) {
                filteredData = filteredData.filter(item => item.cccd === cccdFilter);
            }
            if (hoTenFilter) {
                filteredData = filteredData.filter(item => item.hoTen === hoTenFilter);
            }
            if (fromDate) {
                const fromDateObj = moment(fromDate, 'DD/MM/YYYY').startOf('day');
                filteredData = filteredData.filter(item => moment(item.thoiGianVao) >= fromDateObj);
            }
            if (toDate) {
                const toDateObj = moment(toDate, 'DD/MM/YYYY').endOf('day');
                filteredData = filteredData.filter(item => moment(item.thoiGianVao) <= toDateObj);
            }

            displayData(filteredData);
        }

        // Hiển thị dữ liệu và phân trang
        function displayData(data) {
            const totalPages = Math.ceil(data.length / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const currentData = data.slice(startIndex, endIndex);

            let html = '';
            let totalAmount = 0;

            currentData.forEach(item => {
                totalAmount += item.tongTien;
                html += `
                    <tr class="animate-fade-in">
                        <td>${item.tenPhong}</td>
                        <td>${item.tenLoai}</td>
                        <td>${item.hoTen || 'Khách vãng lai'}</td>
                        <td>${item.cccd || '-'}</td>
                        <td>${calculateAge(item.ngaySinh) || '-'}</td>
                        <td>${formatDateTime(item.thoiGianVao)}</td>
                        <td>${formatDateTime(item.thoiGianRa)}</td>
                        <td>${item.tongThoiGian} giờ</td>
                        <td>${formatCurrency(item.tienPhong)}đ</td>
                        <td>${formatCurrency(item.tienSanPham)}đ</td>
                        <td>${formatCurrency(item.tongTien)}đ</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="showProductDetails(${JSON.stringify(item.danhSachSanPham).replace(/"/g, '&quot;')})">
                                <i class="fas fa-info-circle"></i>
                            </button>
                        </td>
                    </tr>
                `;
            });

            // Thêm dòng tổng
            html += `
                <tr class="total-row">
                    <td colspan="8" class="text-end">Tổng cộng:</td>
                    <td colspan="3">${formatCurrency(totalAmount)}đ</td>
                    <td></td>
                </tr>
            `;

            $('#hoaDonTableBody').html(html);
            renderPagination(totalPages);
        }

        function showProductDetails(products) {
            let productsHtml = '';
            if (products && products.length > 0) {
                productsHtml = `
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Sản phẩm</th>
                                <th>Số lượng</th>
                                <th>Đơn giá</th>
                                <th>Thành tiền</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${products.map(p => `
                                <tr>
                                    <td>${p.tenSanPham}</td>
                                    <td>${p.soLuong}</td>
                                    <td>${formatCurrency(p.donGia)}đ</td>
                                    <td>${formatCurrency(p.thanhTien)}đ</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            } else {
                productsHtml = '<p class="text-center">Không có sản phẩm nào</p>';
            }

            // Kiểm tra xem modal đã tồn tại chưa
            let modalElement = document.getElementById('productDetailsModal');
            
            // Nếu modal chưa tồn tại, tạo mới
            if (!modalElement) {
                modalElement = document.createElement('div');
                modalElement.id = 'productDetailsModal';
                modalElement.className = 'modal fade';
                modalElement.setAttribute('tabindex', '-1');
                modalElement.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Chi tiết sản phẩm</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                ${productsHtml}
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(modalElement);
            } else {
                // Nếu modal đã tồn tại, chỉ cập nhật nội dung
                modalElement.querySelector('.modal-body').innerHTML = productsHtml;
            }

            // Khởi tạo và hiển thị modal
            const modal = new bootstrap.Modal(modalElement);
            modal.show();

            // Xử lý sự kiện khi modal bị ẩn
            modalElement.addEventListener('hidden.bs.modal', function () {
                // Không xóa modal khỏi DOM, chỉ ẩn nó đi
                modal.dispose();
            });
        }

        // Tạo phân trang
        function renderPagination(totalPages) {
            let html = '';
            if (totalPages > 1) {
                html += `
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;

                for (let i = 1; i <= totalPages; i++) {
                    html += `
                        <li class="page-item ${currentPage === i ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `;
                }

                html += `
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;
            }
            $('#pagination').html(html);
        }

        // Tải dữ liệu từ server
        async function loadData() {
            try {
                const fromDate = $('#fromDate').val();
                const toDate = $('#toDate').val();
                
                let url = '/QuanLyHoaDon/GetHoaDon';
                if (fromDate || toDate) {
                    const params = new URLSearchParams();
                    if (fromDate) params.append('fromDate', moment(fromDate, 'DD/MM/YYYY').format());
                    if (toDate) params.append('toDate', moment(toDate, 'DD/MM/YYYY').format());
                    url += '?' + params.toString();
                }

                const response = await fetch(url);
                hoaDonData = await response.json();

                // Cập nhật options cho Tom Select
                const cccdOptions = [...new Set(hoaDonData.filter(x => x.cccd).map(x => ({ cccd: x.cccd })))];
                const hoTenOptions = [...new Set(hoaDonData.filter(x => x.hoTen).map(x => ({ hoTen: x.hoTen })))];

                tomSelectCCCD.clear();
                tomSelectCCCD.clearOptions();
                tomSelectCCCD.addOptions(cccdOptions);

                tomSelectHoTen.clear();
                tomSelectHoTen.clearOptions();
                tomSelectHoTen.addOptions(hoTenOptions);

                filterAndDisplayData();
            } catch (error) {
                console.error('Error loading data:', error);
                toastr.error('Có lỗi xảy ra khi tải dữ liệu');
            }
        }

        // Xử lý sự kiện
        $(document).ready(function() {
            initializeTomSelect();
            initializeDatePickers();
            loadData();

            // Sự kiện thay đổi bộ lọc
            tomSelectCCCD.on('change', filterAndDisplayData);
            tomSelectHoTen.on('change', filterAndDisplayData);
            $('#fromDate, #toDate').on('change', loadData);

            // Sự kiện phân trang
            $(document).on('click', '.page-link', function(e) {
                e.preventDefault();
                const page = $(this).data('page');
                if (page && page !== currentPage) {
                    currentPage = page;
                    filterAndDisplayData();
                }
            });
        });
    </script>
} 