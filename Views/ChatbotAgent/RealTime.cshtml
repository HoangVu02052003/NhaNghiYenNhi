@{
    ViewData["Title"] = "🚀 Real-Time AI Agent";
}

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        height: 100vh;
        overflow: hidden;
    }

    .chat-container {
        height: 100vh;
        display: flex;
        flex-direction: column;
        max-width: 480px;
        margin: 0 auto;
        background: #ffffff;
        box-shadow: 0 0 50px rgba(0,0,0,0.1);
        position: relative;
    }

    /* Header */
    .chat-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        text-align: center;
        box-shadow: 0 2px 20px rgba(102, 126, 234, 0.3);
        position: relative;
        z-index: 10;
    }

    .chat-header h1 {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .chat-header .subtitle {
        font-size: 0.75rem;
        opacity: 0.9;
        margin-top: 0.25rem;
    }

    .status-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        background: #4ade80;
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    .status-indicator.disconnected {
        background: #ef4444;
        animation: none;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    /* Connection Status */
    .connection-status {
        padding: 0.5rem 1rem;
        background: #10b981;
        color: white;
        text-align: center;
        font-size: 0.8rem;
        transition: all 0.3s ease;
    }

    .connection-status.disconnected {
        background: #ef4444;
    }

    .connection-status.connecting {
        background: #f59e0b;
    }

    /* Quick Actions */
    .quick-actions {
        padding: 1rem;
        background: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.75rem;
    }

    .quick-btn {
        background: white;
        border: 2px solid #e2e8f0;
        border-radius: 16px;
        padding: 0.75rem 0.5rem;
        text-align: center;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: pointer;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .quick-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
        border-color: #667eea;
    }

    .quick-btn i {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        display: block;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .quick-btn span {
        font-size: 0.7rem;
        font-weight: 500;
        color: #64748b;
    }

    /* Chat Area */
    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background: linear-gradient(180deg, #f8fafc 0%, #ffffff 100%);
        scroll-behavior: smooth;
    }

    .message {
        margin-bottom: 1rem;
        animation: slideInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @@keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .message.user {
        text-align: right;
    }

    .message-bubble {
        display: inline-block;
        max-width: 85%;
        padding: 1rem 1.25rem;
        border-radius: 24px;
        font-size: 0.9rem;
        line-height: 1.5;
        position: relative;
        word-wrap: break-word;
    }

    .message.user .message-bubble {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom-right-radius: 8px;
        box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
    }

    .message.assistant .message-bubble {
        background: white;
        color: #1e293b;
        border: 2px solid #f1f5f9;
        border-bottom-left-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    }

    .message.assistant .message-bubble.success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        border: none;
    }

    .message.assistant .message-bubble.error {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        border: none;
    }

    .message.assistant .message-bubble.broadcast {
        background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
        color: white;
        border: none;
    }

    .message-time {
        font-size: 0.65rem;
        color: #94a3b8;
        margin-top: 0.5rem;
    }

    /* Typing Indicator */
    .typing-indicator {
        display: none;
        margin-bottom: 1rem;
        animation: fadeIn 0.3s ease;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .typing-bubble {
        background: #f1f5f9;
        border: 2px solid #e2e8f0;
        border-radius: 24px;
        border-bottom-left-radius: 8px;
        padding: 1rem 1.25rem;
        display: inline-block;
        max-width: 85%;
    }

    .typing-dots {
        display: flex;
        gap: 4px;
        align-items: center;
    }

    .typing-dots span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #94a3b8;
        animation: typing 1.4s infinite ease-in-out;
    }

    .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
    .typing-dots span:nth-child(2) { animation-delay: -0.16s; }
    .typing-dots span:nth-child(3) { animation-delay: 0s; }

    @@keyframes typing {
        0%, 80%, 100% { 
            transform: scale(0.8);
            opacity: 0.5;
        }
        40% { 
            transform: scale(1.2);
            opacity: 1;
        }
    }

    /* Voice Controls */
    .voice-controls {
        padding: 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        text-align: center;
        box-shadow: 0 -4px 20px rgba(102, 126, 234, 0.2);
    }

    .voice-controls h3 {
        margin: 0 0 1rem;
        font-size: 1rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .voice-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
    }

    .voice-btn {
        background: rgba(255,255,255,0.2);
        border: 2px solid rgba(255,255,255,0.3);
        border-radius: 20px;
        padding: 0.75rem 1.5rem;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
        font-weight: 500;
        backdrop-filter: blur(10px);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .voice-btn:hover {
        background: rgba(255,255,255,0.3);
        border-color: rgba(255,255,255,0.5);
        transform: translateY(-2px);
    }

    .voice-btn.active {
        background: #ef4444;
        border-color: #ef4444;
        animation: pulse 1.5s infinite;
    }

    .voice-btn.speaking {
        background: #10b981;
        border-color: #10b981;
        animation: pulse 1.5s infinite;
    }

    .record-btn {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #ef4444;
        border: 3px solid rgba(255,255,255,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 20px rgba(239, 68, 68, 0.3);
    }

    .record-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 25px rgba(239, 68, 68, 0.4);
    }

    .record-btn.recording {
        animation: recordPulse 1s infinite alternate;
    }

    @@keyframes recordPulse {
        from {
            transform: scale(1);
            box-shadow: 0 4px 20px rgba(239, 68, 68, 0.3);
        }
        to {
            transform: scale(1.1);
            box-shadow: 0 6px 30px rgba(239, 68, 68, 0.6);
        }
    }

    .voice-status {
        margin-top: 1rem;
        font-size: 0.8rem;
        opacity: 0.9;
        min-height: 20px;
    }

    .voice-status.listening {
        color: #fef3c7;
        animation: fadeInOut 2s infinite;
    }

    @@keyframes fadeInOut {
        0%, 100% { opacity: 0.7; }
        50% { opacity: 1; }
    }

    /* Input Area */
    .chat-input {
        padding: 1rem;
        background: white;
        border-top: 1px solid #e2e8f0;
        box-shadow: 0 -4px 20px rgba(0,0,0,0.05);
    }

    .input-container {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        background: #f8fafc;
        border: 2px solid #e2e8f0;
        border-radius: 25px;
        padding: 0.5rem;
        transition: all 0.3s ease;
    }

    .input-container:focus-within {
        border-color: #667eea;
        box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
    }

    .message-input {
        flex: 1;
        border: none;
        background: transparent;
        padding: 0.75rem 1rem;
        font-size: 0.9rem;
        outline: none;
        font-family: inherit;
    }

    .message-input::placeholder {
        color: #94a3b8;
    }

    .voice-input-btn {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        border: none;
        border-radius: 50%;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
    }

    .voice-input-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
    }

    .voice-input-btn.recording {
        animation: recordPulse 1s infinite alternate;
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
    }

    .send-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 50%;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }

    .send-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }

    .send-btn:active {
        transform: scale(0.95);
    }

    .send-btn:disabled {
        background: #94a3b8;
        cursor: not-allowed;
        transform: none;
    }

    .send-btn i {
        font-size: 1rem;
    }

    /* Mobile Optimizations */
    @@media (max-width: 480px) {
        .chat-container {
            max-width: 100%;
            height: 100vh;
        }

        .quick-actions {
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
            padding: 0.75rem;
        }

        .quick-btn {
            padding: 0.5rem 0.25rem;
        }

        .quick-btn i {
            font-size: 1.25rem;
            margin-bottom: 0.25rem;
        }

        .quick-btn span {
            font-size: 0.65rem;
        }

        .message-bubble {
            max-width: 90%;
            padding: 0.875rem 1rem;
        }

        .chat-messages {
            padding: 0.75rem;
        }

        .chat-input {
            padding: 0.75rem;
        }
    }

    /* Scrollbar customization */
    .chat-messages::-webkit-scrollbar {
        width: 4px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: transparent;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 4px;
    }

    .chat-messages::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }
</style>

<div class="chat-container">
    <!-- Header -->
    <div class="chat-header">
        <h1>
            <i class="fas fa-bolt"></i>
            Real-Time AI Agent
            <span class="status-indicator" id="statusIndicator"></span>
        </h1>
        <div class="subtitle">Trò chuyện thời gian thực - Được hỗ trợ bởi SignalR</div>
    </div>

    <!-- Connection Status -->
    <div class="connection-status" id="connectionStatus">
        🔄 Đang kết nối...
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <div class="quick-btn" onclick="sendQuickMessage('Tình hình phòng hiện tại')">
            <i class="fas fa-chart-bar"></i>
            <span>Tổng quan</span>
        </div>
        <div class="quick-btn" onclick="sendQuickMessage('Đặt phòng số 1')">
            <i class="fas fa-plus-circle"></i>
            <span>Đặt phòng</span>
        </div>
        <div class="quick-btn" onclick="sendQuickMessage('Phòng 1 mua nước ngọt')">
            <i class="fas fa-shopping-cart"></i>
            <span>Mua hàng</span>
        </div>
        <div class="quick-btn" onclick="sendQuickMessage('Trả phòng số 1')">
            <i class="fas fa-sign-out-alt"></i>
            <span>Trả phòng</span>
        </div>
        <div class="quick-btn" onclick="sendQuickMessage('Dọn phòng số 1')">
            <i class="fas fa-broom"></i>
            <span>Dọn dẹp</span>
        </div>
        <div class="quick-btn" onclick="sendQuickMessage('Có sản phẩm gì')">
            <i class="fas fa-search"></i>
            <span>Tìm SP</span>
        </div>
    </div>

    <!-- Chat Messages -->
    <div class="chat-messages" id="chatMessages">
        <!-- Messages will be populated by JavaScript -->
    </div>

    <!-- Typing Indicator -->
    <div class="typing-indicator" id="typingIndicator">
        <div class="typing-bubble">
            🤖 AI Agent đang xử lý...
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    </div>

    <!-- Voice Controls -->
    <div class="voice-controls">
        <h3>
            <i class="fas fa-microphone"></i>
            Voice Chat - Trò chuyện bằng giọng nói
        </h3>
        <div class="voice-buttons">
            <button class="record-btn" id="recordBtn" onclick="toggleVoiceRecording()">
                <i class="fas fa-microphone" id="recordIcon"></i>
            </button>
            <button class="voice-btn" id="stopSpeechBtn" onclick="stopSpeech()" style="display: none;">
                <i class="fas fa-stop"></i>
                Dừng nói
            </button>
            <button class="voice-btn" onclick="toggleAutoSpeak()">
                <i class="fas fa-volume-up" id="autoSpeakIcon"></i>
                <span id="autoSpeakText">Tự động đọc</span>
            </button>
        </div>
        <div class="voice-status" id="voiceStatus">
            🎤 Nhấn nút mic để bắt đầu nói chuyện bằng giọng nói
        </div>
    </div>

    <!-- Input Area -->
    <div class="chat-input">
        <div class="input-container">
            <input type="text" class="message-input" id="messageInput" 
                   placeholder="Nhập tin nhắn hoặc dùng mic... 💬" disabled>
            <button class="voice-input-btn" id="voiceInputBtn" onclick="startQuickVoiceInput()" disabled title="Ghi âm nhanh">
                <i class="fas fa-microphone"></i>
            </button>
            <button class="send-btn" id="sendButton" onclick="sendMessage()" disabled>
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

<!-- SignalR Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

<script>
    // SignalR Connection
    let connection;
    let isConnected = false;

    // Voice Chat Variables
    let recognition;
    let synthesis = window.speechSynthesis;
    let isRecording = false;
    let isAutoSpeak = true;
    let currentUtterance = null;

    // DOM Elements
    const chatMessages = document.getElementById('chatMessages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const typingIndicator = document.getElementById('typingIndicator');
    const statusIndicator = document.getElementById('statusIndicator');
    const connectionStatus = document.getElementById('connectionStatus');
    const voiceStatus = document.getElementById('voiceStatus');
    const recordBtn = document.getElementById('recordBtn');
    const voiceInputBtn = document.getElementById('voiceInputBtn');
    const stopSpeechBtn = document.getElementById('stopSpeechBtn');

    // Initialize SignalR Connection
    async function initializeSignalR() {
        try {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .build();

            // Connection events
            connection.onclose(onDisconnected);
            connection.onreconnecting(onReconnecting);
            connection.onreconnected(onReconnected);

            // Message handlers
            connection.on("ReceiveMessage", onReceiveMessage);
            connection.on("TypingIndicator", onTypingIndicator);

            // Start connection
            updateConnectionStatus('connecting', '🔄 Đang kết nối...');
            await connection.start();
            onConnected();

        } catch (error) {
            console.error('❌ SignalR connection failed:', error);
            updateConnectionStatus('disconnected', '❌ Kết nối thất bại');
        }
    }

    // Connection event handlers
    function onConnected() {
        console.log('🔗 SignalR connected successfully');
        isConnected = true;
        updateConnectionStatus('connected', '✅ Kết nối thành công - Real-time ready!');
        enableInput();
    }

    function onDisconnected() {
        console.log('🔌 SignalR disconnected');
        isConnected = false;
        updateConnectionStatus('disconnected', '❌ Mất kết nối - Đang thử kết nối lại...');
        disableInput();
    }

    function onReconnecting() {
        console.log('🔄 SignalR reconnecting...');
        updateConnectionStatus('connecting', '🔄 Đang kết nối lại...');
        disableInput();
    }

    function onReconnected() {
        console.log('✅ SignalR reconnected');
        isConnected = true;
        updateConnectionStatus('connected', '✅ Đã kết nối lại thành công!');
        enableInput();
    }

    // Message handlers
    function onReceiveMessage(data) {
        const messageType = data.type || 'normal';
        addAssistantMessage(data.response, messageType, data.timestamp);
    }

    function onTypingIndicator(isTyping) {
        if (isTyping) {
            showTypingIndicator();
        } else {
            hideTypingIndicator();
        }
    }

    // Send message
    async function sendMessage() {
        if (!isConnected || !messageInput.value.trim()) return;

        const message = messageInput.value.trim();
        addUserMessage(message);
        messageInput.value = '';

        try {
            await connection.invoke("SendMessage", message);
        } catch (error) {
            console.error('❌ Failed to send message:', error);
            addAssistantMessage('❌ Lỗi gửi tin nhắn. Vui lòng thử lại.', 'error');
        }
    }

    // Quick message
    function sendQuickMessage(message) {
        if (!isConnected) return;
        messageInput.value = message;
        sendMessage();
    }

    // UI helpers
    function updateConnectionStatus(status, message) {
        connectionStatus.textContent = message;
        connectionStatus.className = `connection-status ${status}`;
        
        statusIndicator.className = status === 'connected' ? 'status-indicator' : 'status-indicator disconnected';
    }

    function addUserMessage(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message user';
        messageDiv.innerHTML = `
            <div class="message-bubble">
                <strong>👩‍💼</strong> ${escapeHtml(message)}
            </div>
            <div class="message-time">${getCurrentTime()}</div>
        `;
        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }

    function addAssistantMessage(message, type = 'normal', timestamp = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message assistant';
        
        const bubbleClass = `message-bubble ${type}`;
        
        const formattedMessage = message
            .replace(/\n/g, '<br>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>');
        
        messageDiv.innerHTML = `
            <div class="${bubbleClass}">
                <strong>🤖</strong> ${formattedMessage}
            </div>
            <div class="message-time">${timestamp ? formatTimestamp(timestamp) : getCurrentTime()}</div>
        `;
        chatMessages.appendChild(messageDiv);
        scrollToBottom();
    }

    function showTypingIndicator() {
        typingIndicator.style.display = 'block';
        scrollToBottom();
    }

    function hideTypingIndicator() {
        typingIndicator.style.display = 'none';
    }

    function scrollToBottom() {
        setTimeout(() => {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }, 100);
    }

    function getCurrentTime() {
        return new Date().toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    function formatTimestamp(timestamp) {
        return new Date(timestamp).toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Event listeners
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && isConnected) {
            sendMessage();
        }
    });

    // ===== VOICE CHAT FUNCTIONS =====
    
    // Initialize Speech Recognition
    function initializeSpeechRecognition() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.continuous = false;
            recognition.interimResults = true;
            recognition.lang = 'vi-VN'; // Vietnamese

            recognition.onstart = function() {
                console.log('🎤 Voice recognition started');
                updateVoiceStatus('🎙️ Đang nghe... Hãy nói vào mic!', true);
            };

            recognition.onresult = function(event) {
                let finalTranscript = '';
                let interimTranscript = '';

                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }

                if (interimTranscript) {
                    updateVoiceStatus(`🎙️ "${interimTranscript}"`, true);
                }

                if (finalTranscript) {
                    console.log('🗣️ Speech recognized:', finalTranscript);
                    messageInput.value = finalTranscript;
                    updateVoiceStatus(`✅ Đã nhận: "${finalTranscript}"`);
                    
                    // Auto send message
                    setTimeout(() => {
                        sendMessage();
                        stopVoiceRecording();
                    }, 500);
                }
            };

            recognition.onerror = function(event) {
                console.error('❌ Speech recognition error:', event.error);
                let errorMsg = '❌ Lỗi nhận dạng giọng nói';
                
                switch(event.error) {
                    case 'no-speech':
                        errorMsg = '🔇 Không nghe thấy giọng nói';
                        break;
                    case 'audio-capture':
                        errorMsg = '🎤 Không thể truy cập microphone';
                        break;
                    case 'not-allowed':
                        errorMsg = '🚫 Microphone bị chặn. Vui lòng cấp quyền!';
                        break;
                    case 'network':
                        errorMsg = '🌐 Lỗi mạng khi nhận dạng giọng nói';
                        break;
                }
                
                updateVoiceStatus(errorMsg);
                stopVoiceRecording();
            };

            recognition.onend = function() {
                console.log('🎤 Voice recognition ended');
                if (isRecording) {
                    stopVoiceRecording();
                }
            };

            return true;
        } else {
            console.warn('⚠️ Speech recognition not supported');
            updateVoiceStatus('❌ Trình duyệt không hỗ trợ nhận dạng giọng nói');
            return false;
        }
    }

    // Toggle Voice Recording
    function toggleVoiceRecording() {
        if (!recognition) {
            if (!initializeSpeechRecognition()) {
                return;
            }
        }

        if (!isConnected) {
            updateVoiceStatus('❌ Chưa kết nối SignalR');
            return;
        }

        if (isRecording) {
            stopVoiceRecording();
        } else {
            startVoiceRecording();
        }
    }

    // Start Voice Recording
    function startVoiceRecording() {
        if (currentUtterance && synthesis.speaking) {
            synthesis.cancel();
        }

        try {
            isRecording = true;
            recordBtn.classList.add('recording');
            document.getElementById('recordIcon').className = 'fas fa-stop';
            recognition.start();
            updateVoiceStatus('🎤 Chuẩn bị nhận dạng giọng nói...', true);
        } catch (error) {
            console.error('❌ Failed to start recording:', error);
            updateVoiceStatus('❌ Không thể bắt đầu ghi âm');
            stopVoiceRecording();
        }
    }

    // Stop Voice Recording
    function stopVoiceRecording() {
        isRecording = false;
        recordBtn.classList.remove('recording');
        document.getElementById('recordIcon').className = 'fas fa-microphone';
        
        if (recognition) {
            recognition.stop();
        }
        
        if (!messageInput.value) {
            updateVoiceStatus('🎤 Nhấn nút mic để bắt đầu nói chuyện bằng giọng nói');
        }
    }

    // Quick Voice Input (for input area mic button)
    function startQuickVoiceInput() {
        if (!recognition) {
            if (!initializeSpeechRecognition()) {
                return;
            }
        }

        if (!isConnected) {
            return;
        }

        if (currentUtterance && synthesis.speaking) {
            synthesis.cancel();
        }

        voiceInputBtn.classList.add('recording');
        
        try {
            recognition.onresult = function(event) {
                let finalTranscript = '';
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript;
                    }
                }

                if (finalTranscript) {
                    messageInput.value = finalTranscript;
                    voiceInputBtn.classList.remove('recording');
                }
            };

            recognition.onend = function() {
                voiceInputBtn.classList.remove('recording');
            };

            recognition.start();
        } catch (error) {
            console.error('❌ Quick voice input failed:', error);
            voiceInputBtn.classList.remove('recording');
        }
    }

    // Text-to-Speech
    function speakText(text) {
        if (!synthesis) {
            console.warn('⚠️ Speech synthesis not supported');
            return;
        }

        // Stop current speech
        if (currentUtterance && synthesis.speaking) {
            synthesis.cancel();
        }

        // Clean text for speech
        const cleanText = text
            .replace(/[🤖👩‍💼💬⚠️✅❌📊🏠🛒]/g, '') // Remove emojis
            .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold
            .replace(/\*(.*?)\*/g, '$1') // Remove italic
            .replace(/<[^>]*>/g, '') // Remove HTML tags
            .trim();

        if (!cleanText) return;

        currentUtterance = new SpeechSynthesisUtterance(cleanText);
        currentUtterance.lang = 'vi-VN';
        currentUtterance.rate = 0.9;
        currentUtterance.pitch = 1;
        currentUtterance.volume = 0.8;

        // Find Vietnamese voice if available
        const voices = synthesis.getVoices();
        const vietnameseVoice = voices.find(voice => 
            voice.lang.includes('vi') || voice.name.toLowerCase().includes('vietnam')
        );
        
        if (vietnameseVoice) {
            currentUtterance.voice = vietnameseVoice;
        }

        currentUtterance.onstart = function() {
            console.log('🔊 Started speaking:', cleanText.substring(0, 50) + '...');
            stopSpeechBtn.style.display = 'block';
            updateSpeakingStatus(true);
        };

        currentUtterance.onend = function() {
            console.log('🔇 Finished speaking');
            stopSpeechBtn.style.display = 'none';
            updateSpeakingStatus(false);
            currentUtterance = null;
        };

        currentUtterance.onerror = function(event) {
            console.error('❌ Speech error:', event.error);
            stopSpeechBtn.style.display = 'none';
            updateSpeakingStatus(false);
        };

        synthesis.speak(currentUtterance);
    }

    // Stop Speech
    function stopSpeech() {
        if (synthesis.speaking) {
            synthesis.cancel();
            console.log('⏹️ Speech stopped by user');
        }
        stopSpeechBtn.style.display = 'none';
        updateSpeakingStatus(false);
    }

    // Toggle Auto Speak
    function toggleAutoSpeak() {
        isAutoSpeak = !isAutoSpeak;
        const autoSpeakText = document.getElementById('autoSpeakText');
        const autoSpeakIcon = document.getElementById('autoSpeakIcon');
        
        if (isAutoSpeak) {
            autoSpeakText.textContent = 'Tự động đọc';
            autoSpeakIcon.className = 'fas fa-volume-up';
            updateVoiceStatus('🔊 Đã bật tự động đọc phản hồi');
        } else {
            autoSpeakText.textContent = 'Đã tắt âm';
            autoSpeakIcon.className = 'fas fa-volume-mute';
            updateVoiceStatus('🔇 Đã tắt tự động đọc phản hồi');
        }
        
        setTimeout(() => {
            if (!isRecording) {
                updateVoiceStatus('🎤 Nhấn nút mic để bắt đầu nói chuyện bằng giọng nói');
            }
        }, 2000);
    }

    // Update Voice Status
    function updateVoiceStatus(message, isListening = false) {
        voiceStatus.textContent = message;
        voiceStatus.className = isListening ? 'voice-status listening' : 'voice-status';
    }

    // Update Speaking Status
    function updateSpeakingStatus(isSpeaking) {
        const btns = document.querySelectorAll('.voice-btn');
        btns.forEach(btn => {
            if (isSpeaking) {
                btn.classList.add('speaking');
            } else {
                btn.classList.remove('speaking');
            }
        });
    }

    // ===== ENHANCED MESSAGE HANDLERS =====

    // Enhanced message handlers for voice
    function onReceiveMessage(data) {
        const messageType = data.type || 'normal';
        addAssistantMessage(data.response, messageType, data.timestamp);
        
        // Auto speak if enabled
        if (isAutoSpeak && data.response) {
            setTimeout(() => {
                speakText(data.response);
            }, 500);
        }
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeSignalR();
        initializeSpeechRecognition();
        
        // Load voices after page load
        if (synthesis) {
            synthesis.onvoiceschanged = function() {
                console.log('🗣️ Available voices:', synthesis.getVoices().length);
            };
        }
    });

    // Auto-focus input when connected
    function focusInput() {
        if (isConnected) {
            messageInput.focus();
        }
    }

    // Enhanced enable/disable input
    function enableInput() {
        messageInput.disabled = false;
        sendButton.disabled = false;
        voiceInputBtn.disabled = false;
        messageInput.placeholder = "Nhập tin nhắn hoặc dùng mic... 💬";
    }

    function disableInput() {
        messageInput.disabled = true;
        sendButton.disabled = true;
        voiceInputBtn.disabled = true;
        messageInput.placeholder = "Đang kết nối...";
    }

    // Focus input when connected
    setInterval(focusInput, 1000);
</script> 